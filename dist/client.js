module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var io = __webpack_require__(1);
	var MESSAGES_1 = __webpack_require__(2);
	var dbg = __webpack_require__(3);
	var debug = dbg('ngServer-Client');
	var Client = (function () {
	    function Client(bridgeAddress) {
	        this.bridgeAddress = bridgeAddress;
	        this.socket = io.connect(this.bridgeAddress);
	        this.socket.on('connect', function () {
	            debug('Client connected to Bridge');
	        });
	    }
	    Client.prototype.middleware = function (req, res, next) {
	        var _this = this;
	        debug('MiddleWare called with URL ', req.url);
	        if (req.method !== 'GET') {
	            next();
	        }
	        if (req.xhr === true) {
	            next();
	        }
	        if (/text\/html/.test(req.get('accept')) !== true) {
	            next();
	        }
	        var send = res.send.bind(res);
	        res.send = function (body) {
	            if (typeof body === 'string') {
	                _this.renderHTML(req.url, body, function (response) {
	                    switch (response.status) {
	                        case MESSAGES_1.ENUM_CACHE_STATUS.HTML:
	                            res.location(req.url);
	                            res.status(200);
	                            return send.apply(this, [response.html]);
	                        default:
	                            res.location(req.url);
	                            res.status(200);
	                            return send.apply(this, [body]);
	                    }
	                });
	            }
	            else {
	                return send.apply(_this, [body]);
	            }
	        };
	        next();
	    };
	    ;
	    Client.prototype.renderURL = function (url, cb) {
	        var _this = this;
	        debug('Render URL called', url);
	        this.socket.emit(MESSAGES_1.MSG.CHECK_URL, url);
	        this.socket.on(MESSAGES_1.MSG.ANSWER, function (response) {
	            debug('Client Answer is', MESSAGES_1.ENUM_CACHE_STATUS[response.status]);
	            switch (response.status) {
	                case MESSAGES_1.ENUM_CACHE_STATUS.HTML:
	                    debug('client: Closing socket');
	                    _this.socket.close();
	                    cb({
	                        status: MESSAGES_1.ENUM_CACHE_STATUS.HTML,
	                        html: response.html
	                    });
	                    break;
	                case MESSAGES_1.ENUM_CACHE_STATUS.NO_RENDER:
	                    _this.socket.close();
	                    cb({
	                        status: MESSAGES_1.ENUM_CACHE_STATUS.NO_RENDER
	                    });
	                    break;
	                case MESSAGES_1.ENUM_CACHE_STATUS.RENDER_NO_CACHE:
	                    _this.askBridge({ url: url, strategy: MESSAGES_1.ENUM_CACHE_STATUS.RENDER_NO_CACHE }, cb);
	                    break;
	                case MESSAGES_1.ENUM_CACHE_STATUS.RENDER_CACHE:
	                    _this.askBridge({ url: url, strategy: MESSAGES_1.ENUM_CACHE_STATUS.RENDER_CACHE }, cb);
	                    break;
	                case MESSAGES_1.ENUM_CACHE_STATUS.ERROR:
	                    throw response.err;
	            }
	        });
	    };
	    Client.prototype.renderHTML = function (url, html, cb) {
	        var _this = this;
	        debug('renderHTML called', url);
	        this.socket.emit(MESSAGES_1.MSG.CHECK_URL, url);
	        this.socket.on(MESSAGES_1.MSG.ANSWER, function (response) {
	            switch (response.status) {
	                case MESSAGES_1.ENUM_CACHE_STATUS.HTML:
	                    _this.socket.close();
	                    cb({
	                        status: MESSAGES_1.ENUM_CACHE_STATUS.HTML,
	                        html: response.html
	                    });
	                    break;
	                case MESSAGES_1.ENUM_CACHE_STATUS.NO_RENDER:
	                    _this.socket.close();
	                    cb({
	                        status: MESSAGES_1.ENUM_CACHE_STATUS.NO_RENDER
	                    });
	                    break;
	                case MESSAGES_1.ENUM_CACHE_STATUS.RENDER_NO_CACHE:
	                    _this.askBridge({ url: url, strategy: MESSAGES_1.ENUM_CACHE_STATUS.RENDER_NO_CACHE, html: html }, cb);
	                    break;
	                case MESSAGES_1.ENUM_CACHE_STATUS.RENDER_CACHE:
	                    _this.askBridge({ url: url, strategy: MESSAGES_1.ENUM_CACHE_STATUS.RENDER_CACHE, html: html }, cb);
	                    break;
	                case MESSAGES_1.ENUM_CACHE_STATUS.ERROR:
	                    _this.socket.close();
	                    throw response.err;
	            }
	        });
	    };
	    Client.prototype.askBridge = function (query, cb) {
	        var _this = this;
	        debug('Emitting GET_URL from Client to Bridge');
	        this.socket.on(MESSAGES_1.MSG.RENDER_STATUS, function (response) {
	            debug('Response received from Bridge External', MESSAGES_1.ENUM_RENDER_STATUS[response.status]);
	            switch (response.status) {
	                case MESSAGES_1.ENUM_RENDER_STATUS.HTML:
	                    debug('Client - closing socket');
	                    _this.socket.close();
	                    return cb({
	                        status: MESSAGES_1.ENUM_RENDER_STATUS.HTML,
	                        html: response.html
	                    });
	                case MESSAGES_1.ENUM_RENDER_STATUS.STARTED:
	                case MESSAGES_1.ENUM_RENDER_STATUS.QUEUED:
	                    break;
	                case MESSAGES_1.ENUM_RENDER_STATUS.ERROR:
	                    _this.socket.close();
	                    return cb({
	                        status: MESSAGES_1.ENUM_CACHE_STATUS.ERROR
	                    });
	            }
	        });
	        this.socket.emit(MESSAGES_1.MSG.GET_URL, query);
	    };
	    return Client;
	}());
	module.exports = Client;


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = require("socket.io-client");

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	exports.MSG = {
	    CHECK_URL: 'CHECK_URL',
	    GET_URL: 'GET_URL',
	    ANSWER: 'PARAM_CLIENT_ANSWER',
	    RENDER_STATUS: 'ENUM_CACHE_STATUS',
	    IDLE: 'IDLE',
	    LOG: 'LOG',
	    ERROR: 'ERROR',
	};
	var ENUM_RENDER_STATUS;
	(function (ENUM_RENDER_STATUS) {
	    ENUM_RENDER_STATUS[ENUM_RENDER_STATUS["STARTED"] = 0] = "STARTED";
	    ENUM_RENDER_STATUS[ENUM_RENDER_STATUS["QUEUED"] = 1] = "QUEUED";
	    ENUM_RENDER_STATUS[ENUM_RENDER_STATUS["HTML"] = 2] = "HTML";
	    ENUM_RENDER_STATUS[ENUM_RENDER_STATUS["ERROR"] = 3] = "ERROR";
	})(ENUM_RENDER_STATUS = exports.ENUM_RENDER_STATUS || (exports.ENUM_RENDER_STATUS = {}));
	;
	var ENUM_CACHE_STATUS;
	(function (ENUM_CACHE_STATUS) {
	    ENUM_CACHE_STATUS[ENUM_CACHE_STATUS["RENDER_CACHE"] = 0] = "RENDER_CACHE";
	    ENUM_CACHE_STATUS[ENUM_CACHE_STATUS["NO_RENDER"] = 1] = "NO_RENDER";
	    ENUM_CACHE_STATUS[ENUM_CACHE_STATUS["HTML"] = 2] = "HTML";
	    ENUM_CACHE_STATUS[ENUM_CACHE_STATUS["RENDER_NO_CACHE"] = 3] = "RENDER_NO_CACHE";
	    ENUM_CACHE_STATUS[ENUM_CACHE_STATUS["ERROR"] = 4] = "ERROR";
	})(ENUM_CACHE_STATUS = exports.ENUM_CACHE_STATUS || (exports.ENUM_CACHE_STATUS = {}));
	;
	var ENUM_SLIMER_ERRORS;
	(function (ENUM_SLIMER_ERRORS) {
	    ENUM_SLIMER_ERRORS[ENUM_SLIMER_ERRORS["FILE_ACCESS_ERROR"] = 5] = "FILE_ACCESS_ERROR";
	    ENUM_SLIMER_ERRORS[ENUM_SLIMER_ERRORS["NETWORK_ERROR"] = 6] = "NETWORK_ERROR";
	    ENUM_SLIMER_ERRORS[ENUM_SLIMER_ERRORS["WEBAPP_ERROR"] = 7] = "WEBAPP_ERROR";
	    ENUM_SLIMER_ERRORS[ENUM_SLIMER_ERRORS["LOGIC_ERROR"] = 8] = "LOGIC_ERROR";
	})(ENUM_SLIMER_ERRORS = exports.ENUM_SLIMER_ERRORS || (exports.ENUM_SLIMER_ERRORS = {}));
	;


/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("debug");

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,